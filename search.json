[{"title":"部署TRSS-Yunzai云崽QQNT教程","url":"/2024/08/12/%E9%83%A8%E7%BD%B2TRSS-Yunzai%E4%BA%91%E5%B4%BDQQNT%E6%95%99%E7%A8%8B/","content":"不准将本篇发布至国内任何流量高的中文网站。不限于b站，快手，抖音等不准将本篇发布至国内任何流量高的中文网站。不限于b站，快手，抖音等不准将本篇发布至国内任何流量高的中文网站。不限于b站，快手，抖音等前言本篇教程仅供学习，我的教程仅供参考，若导致封号本人概不负责\n正题有一次我想到qq新版是qqnt架构，偶然看到一篇博客部署了qqnt协议的云崽，所以我就尝试了去部署，成功了\n教程注意！！！！！我部署的云崽是在我自己家，同局域网下的，并且大佬也说服务器没试过部署但如果你尝试后封号或其他原因导致封号本人概不负责！\n准备1 Ubuntu x64系统：我试过纯Debian arm系统，可以安装浏览器却无法启动，哎，难受2 Xshell或putty：任意连接服务器的软件3 nodejs环境：尽量&gt;&#x3D;21版本4 Redis：最新5 chromium浏览器：最新6 Xftp：可有可无，但这个对新手很方便，配合Xshell很好用7 Visual Studio Code：代码编辑器默认下载在root目录\n开始更新软件包sudo apt update\n安装wget,curl，unzip，screen，gitsudo apt install wget curl unzip screen git -y\n\n更新软件源apt update\n下载chromiumapt install chromium-browser\n检验chromium-browser --version\n如果你出现以下可以解决\n安装 lsb-release 包：sudo apt-get updatesudo apt-get install lsb-release\n再次尝试获取 Chromium 版本信息：chromium-browser --version\n\n下载redis安装编译工具apt install build-essential tcl -y\n下载redis我是在这获取的\nwget  http://download.redis.io/releases/redis-7.4.0.tar.gz\n解压tar -xf redis-7.4.0.tar.gz\n进入redis目录cd redis-7.4.0\n编译make\nmake install\n后台启动screen -R redis\n./src/redis-server ./redis.conf\nCtrl+ad退出\n如果想再次进入screen -ls\n\nscreen -r [编号]##像我就是screen -r 10131\n下载安装nodejscd /root\nwget https://nodejs.org/dist/v21.7.3/node-v21.7.3-linux-x64.tar.xz\ntar -xf node-v21.7.3-linux-x64.tar.xz\n设置环境变量nano ~/.bashrc\n在最底下加上export PATH=/root/node-v21.7.3-linux-x64/bin:$PATH###注意！！如果你不是在root目录下下载的，要将“/root/node-v21.7.3-linux-x64/bin”替换为实际路径\n更新变量source ~/.bashrc\n检验node -vnpm -v\n像图中出现出现版本号就对了，不用在意图中的版本号\n换国内淘宝npm源网址\nnpm config set registry https://registry.npmmirror.com\n下载QQNT（这里分为用release下载版和最新构建版的两种方法，前者简单后者能使用最新版）记得点个star，github上不去可以用Watt Toolkit，仅Win10Win11用户可用如果是Win10以下可以手机开流量或打开手机版Watt Toolkit访问下载后上传至电脑再上传至服务器\n使用最新release的方法QQNT项目Release\n#国外wget https://github.com/LagrangeDev/Lagrange.Core/releases/download/nightly/Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gz#国内(二选一)wget https://githubfast.com/LagrangeDev/Lagrange.Core/releases/download/nightly/Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gzwget https://github.zyhmifan.top/https://github.com/LagrangeDev/Lagrange.Core/releases/download/nightly/Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gz\n解压tar -xf Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gz\n(可选)移动到Lagrange.OneBot目录下mv /root/Lagrange.OneBot/bin/Release/net8.0/linux-x64/publish/Lagrange.OneBot /root/Lagrange.OneBot/\ncd /root/Lagrange.OneBot\n给予755权限chmod 755 Lagrange.OneBot \n后台运行screen -R qqnt\n./Lagrange.OneBot\nctrl+ad退出只修改appsettings.json中的Port和Suffix，其他不变nano appsettings.json\n&#123;  #...以上代码不变  &quot;Port&quot;: 2536,  &quot;Suffix&quot;: &quot;/OneBotv11&quot;,  #以下代码不用动...&#125;\n\n再次进入screen -ls\n\nscreen -r [编号]##像我就是screen -r 10131\n回车扫码ctrl+ad退出如果你不嫌麻烦想使用最新构建以下为教程到微软官方下载适合自己系统的 运行时 包和 SDK后以8.0.8的x64版本的运行时 包和和 SDK 8.0.4举例\nroot目录下mkdir 8.0.8#不一定需要和我一样\nmkdir SDK8.0.4\ncd 8.0.8\nwget到目录下wget https://download.visualstudio.microsoft.com/download/pr/648de803-0b0c-46bc-9601-42a94dae0b41/241fd17cee8d473a78675e30681979bb/aspnetcore-runtime-8.0.8-linux-x64.tar.gz\n解压tar -xf aspnetcore-runtime-8.0.8-linux-x64.tar.gz\ncd /root/SDK8.0.4#替换为实际保存目录\n上传wget https://download.visualstudio.microsoft.com/download/pr/db901b0a-3144-4d07-b8ab-6e7a43e7a791/4d9d1b39b879ad969c6c0ceb6d052381/dotnet-sdk-8.0.401-linux-x64.tar.gz\n解压tar -xf dotnet-sdk-8.0.401-linux-x64.tar.gz\nnano ~/.bashrc\nexport PATH=&quot;/root/sdk8.0.4/:$PATH&quot;export DOTNET_ROOT=/root/sdk8.0.4/###注意！！如果你不是一步一步跟我做的，/root/8.0.8；/root/sdk8.0.4/目录需要更换为你实际的目录\n更新变量！！！！！source ~/.bashrc\n检验dotnet --info\n图是我用其他设备测试的，方法一样的\n然后再下载[QQNT]找到最新构建的第一个（不一定是我这个，因为时间会变的嘛，如果没见构建就鼠标滚轮往下滑，无法下滑或没见到就找下一个构建）(https://github.com/LagrangeDev/Lagrange.Core/actions/workflows/Lagrange.OneBot-build.yml)下拉找到适合自己系统的预编译文件注意看你安装的是net8还是net7！！或者（不建议因为更新不及时，并且可能没有适合你的系统）最后最后再三考虑尝试都上不了github，那就点我下载后上传至你的服务器网页登录后就能下载！\n解压unzip Lagrange.OneBot_linux-x64_net8.0_NoSelfContained.zip\n建议放在单独一个文件夹mkdir qqnt\nmv /root/Lagrange.OneBot /root/qqnt/#/root/Lagrange.OneBot 为你实际Lagrange.OneBot的位置，Xftp可以右键复制路径#/root/qqnt/ 为你实际放置的目录位置，Xftp右键目录就可以复制目录路径\n后台运行screen -R qqnt\n./Lagrange.OneBot\nctrl+ad退出只修改appsettings.json中的Port和Suffix，其他不变nano appsettings.json\n&#123;  #...以上代码不变  &quot;Port&quot;: 2536,  &quot;Suffix&quot;: &quot;/OneBotv11&quot;,  #以下代码不用动...&#125;\n\n再次进入screen -ls\n\nscreen -r [编号]##像我就是screen -r 10131\n回车扫码ctrl+ad退出下载TRSS-Yunzai国外\ngit clone  https://github.com/TimeRainStarSky/Yunzai#git clone --depth 1 https://github.com/TimeRainStarSky/Yunzai\n国内\ngit clone  https://gitee.com/TimeRainStarSky/Yunzai#git clone --depth 1 https://gitee.com/TimeRainStarSky/Yunzai\n\n切换到yunzai目录cd Yunzai\n安装npm i -g pnpm\npnpm i\n\n后台运行screen -R yunzai\nnode app\n直接在运行界面输入#安装genshin#安装miao-plugin#安装TRSS-Plugin一个一个输入\n最后ctrl+ad退出\n再次进入screen -ls\n\nscreen -r [编号]##与上面一样\n总结目前这个方法挺稳定的，如果存在问题可以先自行搜索相关错误毕竟我也是站在所有大佬肩膀上完成的啊qwq以上全是本人在部署中遇到问题后解决并总结出来的方法，写的不好请谅解qwq\n"},{"title":"部署hexo的经历和教程","url":"/2024/07/24/%E9%83%A8%E7%BD%B2hexo%E7%9A%84%E7%BB%8F%E5%8E%86%E6%95%99%E7%A8%8B/","content":"终于部署好hexo了，以下是教程\n部署需要1：Linux服务器（最好是debian或ubuntu系统）2：一个ssh软件，电脑在Win10及以上可以考虑使用win+R打开，\nssh [登录的用户名]@&lt;服务器IP&gt;#ssh root@127.0.0.1\n但我更建议使用类似xhell的ssh软件）3：nodejs和npm4：默认使用root用户（不是的请在复制命令时加上sudo）5：一个github账号或者codeberg国内友好，缺点是无法自定义域名\n安装nodejs和npmnodejs官网选择自己的操作系统\nwget https://nodejs.org/dist/v20.16.0/node-v20.16.0-linux-arm64.tar.xz#wget https://nodejs.org/dist/v20.16.0/node-v20.16.0-linux-x64.tar.xz#wget https://nodejs.org/dist/v20.16.0/node-v20.16.0-linux-armv7l.tar.xz#wget https://nodejs.org/dist/v20.16.0/node-v20.16.0-linux-ppc64le.tar.xz#wget https://nodejs.org/dist/v20.16.0/node-v20.16.0-linux-s390x.tar.xz\n解压\ntar -xf node-v20.16.0-linux-arm64.tar.xz#tar -xf node-v20.16.0-linux-x64.tar.xz#tar -xf node-v20.16.0-linux-armv7l.tar.xz#tar -xf node-v20.16.0-linux-ppc64le.tar.xz#tar -xf node-v20.16.0-linux-s390x.tar.xz\n设置环境变量nano ~/.bashrc#nano ~/.bash_profile\n并添加以下行：\nexport PATH=/root/node-v20.16.0-linux-arm64/bin:$PATH#注意！！要将“/root/node-v20.16.0-linux-arm64/bin”替换为实际路径\n更新\nsource ~/.bashrc#source ~/.bash_profile\n\n不出意外的话，使用以下命令验证node和npm\nnode -vnpm -v\n\n\n诶，等等！！由于特殊原因，npm源是比较慢的，所以我建议国内服务器使用最新npm淘宝源，再次由衷感谢为开源社区贡献的大佬，感谢！\nnpm config set registry https://registry.npmmirror.com\n\n安装hexohexo官网已经给了安装步骤了，为了方便我就给大家命令啦\ncd /mkdir blogcd /blognpm install hexo-cli -ghexo init blogcd blognpm installhexo server#注：在执行hexo init blog时github拉取不下来或失败不用管，因为后面还有npm拉取，然后npm我们也设置了国内源，所以静静等待就行；hexo s 与hexo server 是一样的,这时访问 yourIP:4000,就可以预览hexo了\nnode_modules: 依赖包public：存放生成的页面scaffolds：生成文章的模板source：你的文章存放位置themes：主题\npull代码至codeberg因为特殊原因国内加载速度是不够快的或者直接无法连接github的，所以我选择codeberg的教程来到官网\n\n点击注册\n\n点击添加仓库\n\n把仓库名设置成pages\n\n跳转仓库后点击设置\n\n回到服务器有hexo文件的blog目录设置ssh公钥与私钥信息\ngit config --global user.name &quot;注册时的用户名&quot;git config --global user.email &quot;注册时的邮箱&quot;npm install hexo-deployer-git --save #这个一定要输入！\n\n设置ssh公钥与私钥\nssh-keygen -t rsa -C &quot;codeberg的注册邮箱&quot;#一路回车\n\n查看&#x2F;.ssh&#x2F;id_rsa.pub\ncat /root/.ssh/id_rsa.pub\n\n来到codeberg左侧找到部署秘钥\n\n添加部署秘钥\n\n名称随便，粘贴，点击启用写权限\n\n回到主页，找到ssh，复制\n\n找到本地blog文件夹下_config.yml,划到最底\n# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repository: git@codeberg.org:yourname/pages.git  branch: main\n\n\n最后推送\nhexo d\n\n最后再浏览器输入：注册用户名.codeberg.page就可以访问了\n\n额外内容（选择性安装）npm install hexo-wordcount --savenpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive"}]